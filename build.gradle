plugins {
	id 'org.springframework.boot' version '2.4.2'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'com.palantir.git-version' version '0.12.2'
	id "org.flywaydb.flyway" version "7.5.1"
	id 'jacoco'
}

group = 'xyz.andrewkboyd'
version = gitVersion()
sourceCompatibility = '15'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

allprojects {
	repositories {
		jcenter()
		maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }

	}
	gradle.projectsEvaluated {
		tasks.withType(JavaCompile) {
			options.compilerArgs << "-Xlint:-processing" << "-Werror"
		}
	}
	test.useTestNG()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.kafka:spring-kafka'
	implementation group: 'org.mitre.taxii', name: 'taxii', version: '1.1.0.1'
	implementation 'org.postgresql:postgresql'
	implementation 'org.flywaydb:flyway-core'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testCompile group: 'junit', name: 'junit', version: '4.13.1'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.kafka:spring-kafka-test'
	testImplementation 'org.springframework.security:spring-security-test'
}

jar {
	manifest {
		attributes 'Main-class': 'xyz.andrewkboyd.MitreSiphonApplication'
	}
}

test {
	useJUnitPlatform()
	jacoco {
		excludes = ['*generated*']
	}
	finalizedBy jacocoTestReport
}
jacoco {
	toolVersion = '0.8.7-SNAPSHOT'
}
jacocoTestReport {
	dependsOn test
}

task versionFile()  {
	doLast {
		def folder = new File(buildDir.toPath().toString())
		if( !folder.exists() ) {
			folder.mkdirs()
		}
		new File(buildDir, "VERSION").text = gitVersion()
	}
}

flyway {
	url = 'jdbc:postgresql://localhost:5432/mitre'
	user = 'postgres'
	password = 'postgres'
	baselineOnMigrate = true
}

task codeCoverageReport(type: JacocoReport) {
	executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

	subprojects.each {
		sourceSets it.sourceSets.main
	}

	reports {
		xml.enabled true
		xml.destination file("${buildDir}/reports/jacoco/report.xml")
		html.enabled false
		csv.enabled false
	}
}

codeCoverageReport.dependsOn {
	subprojects*.test
}